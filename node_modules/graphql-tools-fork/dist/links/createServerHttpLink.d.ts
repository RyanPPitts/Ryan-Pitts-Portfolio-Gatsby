/// <reference types="node" />
import { ApolloLink, RequestHandler } from 'apollo-link';
import { HttpOptions, UriFunction } from 'apollo-link-http-common';
import KnownLengthFormData, { AppendOptions } from 'form-data';
declare class FormData extends KnownLengthFormData {
    private hasUnknowableLength;
    constructor(options?: any);
    append(key: string, value: any, options?: AppendOptions | string): void;
    getLength(callback: (err: Error | null, length: number) => void): void;
    getLengthSync(): number;
}
export declare namespace HttpLink {
    interface Function extends UriFunction {
    }
    interface Options extends HttpOptions {
        /**
         * If set to true, use the HTTP GET method for query operations. Mutations
         * will still use the method specified in fetchOptions.method (which defaults
         * to POST).
         */
        useGETForQueries?: boolean;
        serializer?: (method: string) => any;
        appendFile?: (form: FormData, index: string, file: File) => void;
    }
}
export import FetchOptions = HttpLink.Options;
export import UriFunction = HttpLink.Function;
import { Readable } from 'stream';
interface File {
    createReadStream?: () => Readable;
    filename?: string;
    mimetype?: string;
    name?: string;
}
export declare const createServerHttpLink: (linkOptions?: FetchOptions) => ApolloLink;
export declare class ServerHttpLink extends ApolloLink {
    requester: RequestHandler;
    constructor(opts?: HttpLink.Options);
}
export {};

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_1 = require("graphql");
var each_1 = __importDefault(require("./each"));
var updateEachKey_1 = __importDefault(require("./updateEachKey"));
var stub_1 = require("./stub");
var clone_1 = require("./clone");
var hasOwn = Object.prototype.hasOwnProperty;
// Update any references to named schema types that disagree with the named
// types found in schema.getTypeMap().
function healSchema(schema) {
    healTypes(schema.getTypeMap(), schema.getDirectives());
    // Reconstruct the schema to reinitialize private variables
    // e.g. the stored implementation map and the proper root types.
    Object.assign(schema, clone_1.cloneSchema(schema));
    return schema;
}
exports.healSchema = healSchema;
function healTypes(originalTypeMap, directives, config) {
    if (config === void 0) { config = {
        skipPruning: false,
    }; }
    var actualNamedTypeMap = Object.create(null);
    // If any of the .name properties of the GraphQLNamedType objects in
    // schema.getTypeMap() have changed, the keys of the type map need to
    // be updated accordingly.
    each_1.default(originalTypeMap, function (namedType, typeName) {
        if (!namedType || typeName.startsWith('__')) {
            return;
        }
        var actualName = namedType.name;
        if (actualName.startsWith('__')) {
            return;
        }
        if (hasOwn.call(actualNamedTypeMap, actualName)) {
            throw new Error("Duplicate schema type name " + actualName);
        }
        actualNamedTypeMap[actualName] = namedType;
        // Note: we are deliberately leaving namedType in the schema by its
        // original name (which might be different from actualName), so that
        // references by that name can be healed.
    });
    // Now add back every named type by its actual name.
    each_1.default(actualNamedTypeMap, function (namedType, typeName) {
        originalTypeMap[typeName] = namedType;
    });
    // Directive declaration argument types can refer to named types.
    each_1.default(directives, function (decl) {
        if (decl.args) {
            updateEachKey_1.default(decl.args, function (arg) {
                arg.type = healType(arg.type);
                return arg.type === null ? null : arg;
            });
        }
    });
    each_1.default(originalTypeMap, function (namedType, typeName) {
        // Heal all named types, except for dangling references, kept only to redirect.
        if (!typeName.startsWith('__') &&
            hasOwn.call(actualNamedTypeMap, typeName)) {
            heal(namedType);
        }
    });
    updateEachKey_1.default(originalTypeMap, function (namedType, typeName) {
        // Dangling references to renamed types should remain in the schema
        // during healing, but must be removed now, so that the following
        // invariant holds for all names: schema.getType(name).name === name
        if (!typeName.startsWith('__') &&
            !hasOwn.call(actualNamedTypeMap, typeName)) {
            return null;
        }
    });
    if (!config.skipPruning) {
        pruneTypes(originalTypeMap, directives);
    }
    function heal(type) {
        if (type instanceof graphql_1.GraphQLObjectType) {
            healFields(type);
            healInterfaces(type);
        }
        else if (type instanceof graphql_1.GraphQLInterfaceType) {
            healFields(type);
        }
        else if (type instanceof graphql_1.GraphQLUnionType) {
            healUnderlyingTypes(type);
        }
        else if (type instanceof graphql_1.GraphQLInputObjectType) {
            healInputFields(type);
        }
        else if (type instanceof graphql_1.GraphQLScalarType || graphql_1.GraphQLEnumType) {
            // Nothing to do.
        }
        else {
            throw new Error("Unexpected schema type: " + type);
        }
    }
    function healFields(type) {
        updateEachKey_1.default(type.getFields(), function (field) {
            if (field.args) {
                updateEachKey_1.default(field.args, function (arg) {
                    arg.type = healType(arg.type);
                    return arg.type === null ? null : arg;
                });
            }
            field.type = healType(field.type);
            return field.type === null ? null : field;
        });
    }
    function healInterfaces(type) {
        updateEachKey_1.default(type.getInterfaces(), function (iface) {
            var healedType = healType(iface);
            return healedType;
        });
    }
    function healInputFields(type) {
        updateEachKey_1.default(type.getFields(), function (field) {
            field.type = healType(field.type);
            return field.type === null ? null : field;
        });
    }
    function healUnderlyingTypes(type) {
        updateEachKey_1.default(type.getTypes(), function (t) {
            var healedType = healType(t);
            return healedType;
        });
    }
    function healType(type) {
        // Unwrap the two known wrapper types
        if (type instanceof graphql_1.GraphQLList) {
            var healedType = healType(type.ofType);
            return healedType ? new graphql_1.GraphQLList(healedType) : null;
        }
        else if (type instanceof graphql_1.GraphQLNonNull) {
            var healedType = healType(type.ofType);
            return healedType ? new graphql_1.GraphQLNonNull(healedType) : null;
        }
        else if (graphql_1.isNamedType(type)) {
            // If a type annotation on a field or an argument or a union member is
            // any `GraphQLNamedType` with a `name`, then it must end up identical
            // to `schema.getType(name)`, since `schema.getTypeMap()` is the source
            // of truth for all named schema types.
            // Note that new types can still be simply added by adding a field, as
            // the official type will be undefined, not null.
            var officialType = originalTypeMap[type.name];
            if (officialType === undefined) {
                if (stub_1.isStub(type)) {
                    officialType = stub_1.getBuiltInForStub(type);
                }
                else {
                    officialType = type;
                }
                originalTypeMap[type.name] = officialType;
            }
            return officialType;
        }
        else {
            return null;
        }
    }
}
exports.healTypes = healTypes;
function pruneTypes(typeMap, directives) {
    var implementedInterfaces = {};
    each_1.default(typeMap, function (namedType, typeName) {
        if (namedType instanceof graphql_1.GraphQLObjectType) {
            each_1.default(namedType.getInterfaces(), function (iface) {
                implementedInterfaces[iface.name] = true;
            });
        }
    });
    var prunedTypeMap = false;
    updateEachKey_1.default(typeMap, function (type, typeName) {
        var shouldPrune = false;
        if (type instanceof graphql_1.GraphQLObjectType) {
            // prune types with no fields
            shouldPrune = !Object.keys(type.getFields()).length;
        }
        else if (type instanceof graphql_1.GraphQLUnionType) {
            // prune unions without underlying types
            shouldPrune = !type.getTypes().length;
        }
        else if (type instanceof graphql_1.GraphQLInterfaceType) {
            // prune interfaces without fields or without implementations
            shouldPrune = !Object.keys(type.getFields()).length || !implementedInterfaces[type.name];
        }
        if (shouldPrune) {
            prunedTypeMap = true;
            return null;
        }
    });
    // every prune requires another round of healing
    if (prunedTypeMap) {
        healTypes(typeMap, directives);
    }
}
//# sourceMappingURL=heal.js.map
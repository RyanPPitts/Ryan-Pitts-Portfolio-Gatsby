Object.defineProperty(exports, "__esModule", { value: true });
var graphql_1 = require("graphql");
var checkResultAndHandleErrors_1 = require("./checkResultAndHandleErrors");
var errors_1 = require("./errors");
if ((typeof global !== 'undefined' && 'Symbol' in global) ||
    (typeof window !== 'undefined' && 'Symbol' in window)) {
    exports.SUBSCHEMAS_SYMBOL = Symbol('subschemas');
    exports.ERROR_SYMBOL = Symbol('subschemaErrors');
}
else {
    exports.SUBSCHEMAS_SYMBOL = Symbol('subschemas');
    exports.ERROR_SYMBOL = '@@__subschemaErrors';
}
function isProxiedResult(result) {
    return result && result[exports.ERROR_SYMBOL];
}
exports.isProxiedResult = isProxiedResult;
function getSubschemas(result) {
    return result && result[exports.SUBSCHEMAS_SYMBOL];
}
exports.getSubschemas = getSubschemas;
function setSubschemas(result, subschemas) {
    result[exports.SUBSCHEMAS_SYMBOL] = subschemas;
}
exports.setSubschemas = setSubschemas;
function setErrors(result, errors) {
    result[exports.ERROR_SYMBOL] = errors;
}
exports.setErrors = setErrors;
function getErrors(result, pathSegment) {
    var errors = result && result[exports.ERROR_SYMBOL];
    if (!Array.isArray(errors)) {
        return null;
    }
    var fieldErrors = [];
    for (var _i = 0, errors_2 = errors; _i < errors_2.length; _i++) {
        var error = errors_2[_i];
        if (!error.path || error.path[0] === pathSegment) {
            fieldErrors.push(error);
        }
    }
    return fieldErrors;
}
exports.getErrors = getErrors;
function unwrapResult(parent, info, path) {
    var pathLength = path.length;
    for (var i = 0; i < pathLength; i++) {
        var responseKey = path[i];
        var errors = getErrors(parent, responseKey);
        var subschemas = getSubschemas(parent);
        var object = parent[responseKey];
        if (object == null) {
            return checkResultAndHandleErrors_1.handleNull(info.fieldNodes, graphql_1.responsePathAsArray(info.path), errors);
        }
        checkResultAndHandleErrors_1.makeObjectProxiedResult(object, errors, subschemas);
        parent = object;
    }
    return parent;
}
exports.unwrapResult = unwrapResult;
function dehoistResult(parent, delimeter) {
    if (delimeter === void 0) { delimeter = '__gqltf__'; }
    var result = Object.create(null);
    Object.keys(parent).forEach(function (alias) {
        var obj = result;
        var fieldNames = alias.split(delimeter);
        var fieldName = fieldNames.pop();
        fieldNames.forEach(function (key) {
            obj = obj[key] = obj[key] || Object.create(null);
        });
        obj[fieldName] = parent[alias];
    });
    result[exports.ERROR_SYMBOL] = parent[exports.ERROR_SYMBOL].map(function (error) {
        if (error.path) {
            var path = error.path.slice();
            var pathSegment = path.shift();
            var expandedPathSegment = pathSegment.split(delimeter);
            return errors_1.relocatedError(error, error.nodes, expandedPathSegment.concat(path));
        }
        else {
            return error;
        }
    });
    result[exports.SUBSCHEMAS_SYMBOL] = parent[exports.SUBSCHEMAS_SYMBOL];
    return result;
}
exports.dehoistResult = dehoistResult;
//# sourceMappingURL=proxiedResult.js.map
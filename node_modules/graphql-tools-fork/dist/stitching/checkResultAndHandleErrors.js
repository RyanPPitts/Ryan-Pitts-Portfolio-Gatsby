var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_1 = require("graphql");
var getResponseKeyFromInfo_1 = require("./getResponseKeyFromInfo");
var errors_1 = require("./errors");
var resolveFromParentTypename_1 = __importDefault(require("./resolveFromParentTypename"));
var proxiedResult_1 = require("./proxiedResult");
var utils_1 = require("../utils");
function checkResultAndHandleErrors(result, context, info, responseKey, subschema) {
    if (!responseKey) {
        responseKey = getResponseKeyFromInfo_1.getResponseKeyFromInfo(info);
    }
    var errors = result.errors || [];
    var data = result.data && result.data[responseKey];
    var subschemas = [subschema];
    return handleResult(data, errors, subschemas, context, info);
}
exports.checkResultAndHandleErrors = checkResultAndHandleErrors;
function handleResult(result, errors, subschemas, context, info) {
    var type = graphql_1.getNullableType(info.returnType);
    if (result == null) {
        return handleNull(info.fieldNodes, graphql_1.responsePathAsArray(info.path), errors);
    }
    if (graphql_1.isLeafType(type)) {
        return type.parseValue(result);
    }
    else if (graphql_1.isCompositeType(type)) {
        return handleObject(type, result, errors, subschemas, context, info);
    }
    else if (graphql_1.isListType(type)) {
        return handleList(type, result, errors, subschemas, context, info);
    }
}
exports.handleResult = handleResult;
function makeObjectProxiedResult(object, errors, subschemas) {
    proxiedResult_1.setErrors(object, errors.map(function (error) {
        return errors_1.relocatedError(error, error.nodes, error.path ? error.path.slice(1) : undefined);
    }));
    proxiedResult_1.setSubschemas(object, subschemas);
}
exports.makeObjectProxiedResult = makeObjectProxiedResult;
function handleObject(type, object, errors, subschemas, context, info) {
    makeObjectProxiedResult(object, errors, subschemas);
    if (info.mergeInfo) {
        return mergeFields(type, object, subschemas, context, info);
    }
    else {
        return object;
    }
}
exports.handleObject = handleObject;
function handleList(type, list, errors, subschemas, context, info) {
    var childErrors = errors_1.getErrorsByPathSegment(errors);
    list = list.map(function (listMember, index) { return handleListMember(graphql_1.getNullableType(type.ofType), listMember, index, childErrors[index] || [], subschemas, context, info); });
    return list;
}
function handleListMember(type, listMember, index, errors, subschemas, context, info) {
    if (listMember == null) {
        return handleNull(info.fieldNodes, __spreadArrays(graphql_1.responsePathAsArray(info.path), [index]), errors);
    }
    if (graphql_1.isLeafType(type)) {
        return type.parseValue(listMember);
    }
    else if (graphql_1.isCompositeType(type)) {
        return handleObject(type, listMember, errors, subschemas, context, info);
    }
    else if (graphql_1.isListType(type)) {
        return handleList(type, listMember, errors, subschemas, context, info);
    }
}
function mergeFields(type, object, subschemas, context, info) {
    return __awaiter(this, void 0, void 0, function () {
        var typeName, initialSchemas, remainingSubschemas, results;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (graphql_1.isAbstractType(type)) {
                        typeName = info.schema.getTypeMap()[resolveFromParentTypename_1.default(object)].name;
                    }
                    else {
                        typeName = type.name;
                    }
                    initialSchemas = info.mergeInfo.mergedTypes[typeName] &&
                        info.mergeInfo.mergedTypes[typeName].subschemas;
                    if (!initialSchemas) return [3 /*break*/, 2];
                    remainingSubschemas = initialSchemas.filter(function (subschema) { return !subschemas.includes(subschema); });
                    if (!remainingSubschemas.length) return [3 /*break*/, 2];
                    return [4 /*yield*/, Promise.all(remainingSubschemas.map(function (subschema) {
                            var mergedTypeResolver = subschema.mergedTypeConfigs[typeName].mergedTypeResolver;
                            return mergedTypeResolver(subschema, object, context, __assign(__assign({}, info), { mergeInfo: __assign(__assign({}, info.mergeInfo), { mergedTypes: {} }) }));
                        }))];
                case 1:
                    results = _a.sent();
                    object = results.reduce(function (acc, r) { return utils_1.mergeDeep(acc, r); }, object);
                    _a.label = 2;
                case 2: return [2 /*return*/, object];
            }
        });
    });
}
function handleNull(fieldNodes, path, errors) {
    if (errors.length) {
        if (errors.some(function (error) { return !error.path || error.path.length < 2; })) {
            return errors_1.relocatedError(errors_1.combineErrors(errors), fieldNodes, path);
        }
        else if (errors.some(function (error) { return typeof error.path[1] === 'string'; })) {
            var childErrors_1 = errors_1.getErrorsByPathSegment(errors);
            var result_1 = Object.create(null);
            Object.keys(childErrors_1).forEach(function (pathSegment) {
                result_1[pathSegment] = handleNull(fieldNodes, __spreadArrays(path, [pathSegment]), childErrors_1[pathSegment]);
            });
            return result_1;
        }
        else {
            var childErrors_2 = errors_1.getErrorsByPathSegment(errors);
            var result_2 = new Array;
            Object.keys(childErrors_2).forEach(function (pathSegment) {
                result_2.push(handleNull(fieldNodes, __spreadArrays(path, [parseInt(pathSegment, 10)]), childErrors_2[pathSegment]));
            });
            return result_2;
        }
    }
    else {
        return null;
    }
}
exports.handleNull = handleNull;
//# sourceMappingURL=checkResultAndHandleErrors.js.map
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_1 = require("graphql");
var linkToFetcher_1 = __importStar(require("./linkToFetcher"));
var addTypenameToAbstract_1 = require("./addTypenameToAbstract");
var checkResultAndHandleErrors_1 = require("./checkResultAndHandleErrors");
var observableToAsyncIterable_1 = require("./observableToAsyncIterable");
var mapAsyncIterator_1 = __importDefault(require("./mapAsyncIterator"));
var utils_1 = require("../utils");
var resolvers_1 = require("./resolvers");
var generate_1 = require("../generate");
function makeRemoteExecutableSchema(_a) {
    var targetSchema = _a.schema, link = _a.link, fetcher = _a.fetcher, _b = _a.createResolver, customCreateResolver = _b === void 0 ? createResolver : _b, buildSchemaOptions = _a.buildSchemaOptions, _c = _a.printSchemaOptions, printSchemaOptions = _c === void 0 ? { commentDescriptions: true } : _c;
    if (!fetcher && link) {
        fetcher = linkToFetcher_1.default(link);
    }
    if (typeof targetSchema === 'string') {
        targetSchema = graphql_1.buildSchema(targetSchema, buildSchemaOptions);
    }
    var remoteSchema = utils_1.cloneSchema(targetSchema);
    resolvers_1.stripResolvers(remoteSchema);
    function createProxyingResolver(schema, operation) {
        if (operation === 'query' || operation === 'mutation') {
            return customCreateResolver(fetcher);
        }
        else {
            return createSubscriptionResolver(link);
        }
    }
    generate_1.addResolversToSchema({
        schema: remoteSchema,
        resolvers: resolvers_1.generateProxyingResolvers({ schema: remoteSchema }, createProxyingResolver),
        resolverValidationOptions: {
            allowResolversNotInSchema: true,
        },
    });
    return remoteSchema;
}
exports.default = makeRemoteExecutableSchema;
function createResolver(fetcher) {
    var _this = this;
    return function (root, args, context, info) { return __awaiter(_this, void 0, void 0, function () {
        var fragments, query, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    fragments = Object.keys(info.fragments).map(function (fragment) { return info.fragments[fragment]; });
                    query = {
                        kind: graphql_1.Kind.DOCUMENT,
                        definitions: __spreadArrays([info.operation], fragments)
                    };
                    query = addTypenameToAbstract_1.addTypenameToAbstract(info.schema, query);
                    return [4 /*yield*/, fetcher({
                            query: query,
                            variables: info.variableValues,
                            context: { graphqlContext: context }
                        })];
                case 1:
                    result = _a.sent();
                    return [2 /*return*/, checkResultAndHandleErrors_1.checkResultAndHandleErrors(result, context, info)];
            }
        });
    }); };
}
exports.createResolver = createResolver;
function createSubscriptionResolver(link) {
    return function (root, args, context, info) {
        var fragments = Object.keys(info.fragments).map(function (fragment) { return info.fragments[fragment]; });
        var query = {
            kind: graphql_1.Kind.DOCUMENT,
            definitions: __spreadArrays([info.operation], fragments)
        };
        query = addTypenameToAbstract_1.addTypenameToAbstract(info.schema, query);
        var operation = {
            query: query,
            variables: info.variableValues,
            context: { graphqlContext: context }
        };
        var observable = linkToFetcher_1.execute(link, operation);
        var originalAsyncIterator = observableToAsyncIterable_1.observableToAsyncIterable(observable);
        return mapAsyncIterator_1.default(originalAsyncIterator, function (result) {
            var _a;
            return (_a = {},
                _a[info.fieldName] = checkResultAndHandleErrors_1.checkResultAndHandleErrors(result, context, info),
                _a);
        });
    };
}
//# sourceMappingURL=makeRemoteExecutableSchema.js.map
Object.defineProperty(exports, "__esModule", { value: true });
var makeExecutableSchema_1 = require("../makeExecutableSchema");
var transforms_1 = require("../transforms/transforms");
var resolvers_1 = require("../stitching/resolvers");
var Interfaces_1 = require("../Interfaces");
var clone_1 = require("../utils/clone");
function wrapSchema(subschema, transforms) {
    if (transforms === void 0) { transforms = []; }
    if (Interfaces_1.isSubschemaConfig(subschema)) {
        if (transforms) {
            subschema.transforms = (subschema.transforms || []).concat(transforms);
        }
    }
    else {
        subschema = {
            schema: subschema,
            transforms: transforms,
        };
    }
    var schema = clone_1.cloneSchema(subschema.schema);
    resolvers_1.stripResolvers(schema);
    makeExecutableSchema_1.addResolversToSchema({
        schema: schema,
        resolvers: resolvers_1.generateProxyingResolvers(subschema),
        resolverValidationOptions: {
            allowResolversNotInSchema: true,
        },
    });
    return transforms_1.applySchemaTransforms(schema, subschema.transforms);
}
exports.wrapSchema = wrapSchema;
function transformSchema(subschema, transforms) {
    var schema = wrapSchema(subschema, transforms);
    schema.transforms = transforms.slice().reverse();
    return schema;
}
exports.default = transformSchema;
//# sourceMappingURL=transformSchema.js.map
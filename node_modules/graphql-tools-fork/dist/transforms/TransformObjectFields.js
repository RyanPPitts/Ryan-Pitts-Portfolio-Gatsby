var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_1 = require("graphql");
var isEmptyObject_1 = __importDefault(require("../utils/isEmptyObject"));
var Interfaces_1 = require("../Interfaces");
var visitSchema_1 = require("../utils/visitSchema");
var TransformObjectFields = /** @class */ (function () {
    function TransformObjectFields(objectFieldTransformer, fieldNodeTransformer) {
        this.objectFieldTransformer = objectFieldTransformer;
        this.fieldNodeTransformer = fieldNodeTransformer;
        this.mapping = {};
    }
    TransformObjectFields.prototype.transformSchema = function (originalSchema) {
        var _a;
        var _this = this;
        this.transformedSchema = visitSchema_1.visitSchema(originalSchema, (_a = {},
            _a[Interfaces_1.VisitSchemaKind.ROOT_OBJECT] = function () {
                return undefined;
            },
            _a[Interfaces_1.VisitSchemaKind.OBJECT_TYPE] = function (type) {
                return _this.transformFields(type, _this.objectFieldTransformer);
            },
            _a));
        return this.transformedSchema;
    };
    TransformObjectFields.prototype.transformRequest = function (originalRequest) {
        var fragments = {};
        originalRequest.document.definitions.filter(function (def) { return def.kind === graphql_1.Kind.FRAGMENT_DEFINITION; }).forEach(function (def) {
            fragments[def.name.value] = def;
        });
        var document = this.transformDocument(originalRequest.document, this.mapping, this.fieldNodeTransformer, fragments);
        return __assign(__assign({}, originalRequest), { document: document });
    };
    TransformObjectFields.prototype.transformFields = function (type, objectFieldTransformer) {
        var _this = this;
        var typeConfig = type.toConfig();
        var fields = type.getFields();
        var newFields = {};
        Object.keys(fields).forEach(function (fieldName) {
            var field = fields[fieldName];
            var transformedField = objectFieldTransformer(type.name, fieldName, field);
            if (typeof transformedField === 'undefined') {
                newFields[fieldName] = typeConfig.fields[fieldName];
            }
            else if (transformedField !== null) {
                var newName = transformedField.name;
                if (newName) {
                    newFields[newName] = transformedField.field ?
                        transformedField.field :
                        typeConfig.fields[fieldName];
                    if (newName !== fieldName) {
                        var typeName = type.name;
                        if (!_this.mapping[typeName]) {
                            _this.mapping[typeName] = {};
                        }
                        _this.mapping[typeName][newName] = fieldName;
                    }
                }
                else {
                    newFields[fieldName] = transformedField;
                }
            }
        });
        if (isEmptyObject_1.default(newFields)) {
            return null;
        }
        else {
            return new graphql_1.GraphQLObjectType(__assign(__assign({}, type.toConfig()), { fields: newFields }));
        }
    };
    TransformObjectFields.prototype.transformDocument = function (document, mapping, fieldNodeTransformer, fragments) {
        var _a;
        if (fragments === void 0) { fragments = {}; }
        var typeInfo = new graphql_1.TypeInfo(this.transformedSchema);
        var newDocument = graphql_1.visit(document, graphql_1.visitWithTypeInfo(typeInfo, (_a = {},
            _a[graphql_1.Kind.SELECTION_SET] = function (node) {
                var parentType = typeInfo.getParentType();
                if (parentType) {
                    var parentTypeName_1 = parentType.name;
                    var newSelections_1 = [];
                    node.selections.forEach(function (selection) {
                        if (selection.kind === graphql_1.Kind.FIELD) {
                            var newName = selection.name.value;
                            var transformedSelection = fieldNodeTransformer
                                ? fieldNodeTransformer(parentTypeName_1, newName, selection, fragments)
                                : selection;
                            if (Array.isArray(transformedSelection)) {
                                newSelections_1 = newSelections_1.concat(transformedSelection);
                            }
                            else if (transformedSelection.kind === graphql_1.Kind.FIELD) {
                                var oldName = mapping[parentTypeName_1] && mapping[parentTypeName_1][newName];
                                if (oldName) {
                                    newSelections_1.push(__assign(__assign({}, transformedSelection), { name: {
                                            kind: graphql_1.Kind.NAME,
                                            value: oldName
                                        }, alias: {
                                            kind: graphql_1.Kind.NAME,
                                            value: newName
                                        } }));
                                }
                                else {
                                    newSelections_1.push(transformedSelection);
                                }
                            }
                            else {
                                newSelections_1.push(transformedSelection);
                            }
                        }
                        else {
                            newSelections_1.push(selection);
                        }
                    });
                    return __assign(__assign({}, node), { selections: newSelections_1 });
                }
            },
            _a)));
        return newDocument;
    };
    return TransformObjectFields;
}());
exports.default = TransformObjectFields;
//# sourceMappingURL=TransformObjectFields.js.map
import { SelectionSetNode, FragmentDefinitionNode } from 'graphql';
import { Transform } from './transforms';
import { Request, Result } from '../Interfaces';
export declare type QueryTransformer = (selectionSet: SelectionSetNode, fragments: Record<string, FragmentDefinitionNode>) => SelectionSetNode;
export declare type ResultTransformer = (result: any) => any;
export declare type ErrorPathTransformer = (path: ReadonlyArray<string | number>) => Array<string | number>;
export default class TransformQuery implements Transform {
    private path;
    private queryTransformer;
    private resultTransformer;
    private errorPathTransformer;
    private fragments;
    constructor({ path, queryTransformer, resultTransformer, errorPathTransformer, fragments, }: {
        path: Array<string>;
        queryTransformer: QueryTransformer;
        resultTransformer?: ResultTransformer;
        errorPathTransformer?: ErrorPathTransformer;
        fragments?: Record<string, FragmentDefinitionNode>;
    });
    transformRequest(originalRequest: Request): Request;
    transformResult(originalResult: Result): Result;
    private transformData;
    private transformErrors;
}

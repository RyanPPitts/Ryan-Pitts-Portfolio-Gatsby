import { GraphQLSchema, GraphQLField, GraphQLFieldConfig, FieldNode, SelectionNode, FragmentDefinitionNode } from 'graphql';
import { Request } from '../Interfaces';
import { Transform } from './transforms';
export declare type ObjectFieldTransformer = (typeName: string, fieldName: string, field: GraphQLField<any, any>) => GraphQLFieldConfig<any, any> | RenamedField | null | undefined;
export declare type FieldNodeTransformer = (typeName: string, fieldName: string, fieldNode: FieldNode, fragments: Record<string, FragmentDefinitionNode>) => SelectionNode | Array<SelectionNode>;
declare type RenamedField = {
    name: string;
    field?: GraphQLFieldConfig<any, any>;
};
export default class TransformObjectFields implements Transform {
    private objectFieldTransformer;
    private fieldNodeTransformer;
    private transformedSchema;
    private mapping;
    constructor(objectFieldTransformer: ObjectFieldTransformer, fieldNodeTransformer?: FieldNodeTransformer);
    transformSchema(originalSchema: GraphQLSchema): GraphQLSchema;
    transformRequest(originalRequest: Request): Request;
    private transformFields;
    private transformDocument;
}
export {};
